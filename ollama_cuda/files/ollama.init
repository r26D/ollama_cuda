#!/bin/sh
### BEGIN INIT INFO
# Provides:          ollama
# Required-Start:    $network
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Ollama AI server
# Description:       Starts the Ollama model server
### END INIT INFO

# Customize these paths
# Customize these paths
OLLAMA_BIN="/usr/local/bin/ollama"
OLLAMA_USER="ollama"
OLLAMA_GROUP="ollama"
export OLLAMA_MODELS="${OLLAMA_MODELS:-/workspace/models}"
export OLLAMA_MAX_CTX="${OLLAMA_MAX_CTX:-65536}"
PIDFILE="/var/run/ollama.pid"
LOGFILE="/var/log/ollama.log"
#Allows direct access to the server
export OLLAMA_HOST="0.0.0.0:11434"

DAEMON_OPTS="serve"



DAEMON_OPTS="serve"

. /lib/lsb/init-functions

start() {
    echo "Starting Ollama..."
    if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
        echo "Ollama is already running."
        return 1
    fi

    start-stop-daemon --start --quiet \
        --background \
        --pidfile "$PIDFILE" \
        --make-pidfile \
        --chuid "$OLLAMA_USER:$OLLAMA_GROUP" \
        --exec "$OLLAMA_BIN" -- $DAEMON_OPTS \
        >> "$LOGFILE" 2>&1 \
        || return 2

    return 0
}

stop() {
    echo "Stopping Ollama..."
    start-stop-daemon --stop --quiet --pidfile "$PIDFILE" || return 1
    rm -f "$PIDFILE"
    return 0
}

status() {
    if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
        echo "Ollama is running (PID $(cat "$PIDFILE"))"
        return 0
    else
        echo "Ollama is not running"
        return 3
    fi
}

case "$1" in
    start)  start ;;
    stop)   stop ;;
    restart) stop && start ;;
    status) status ;;
    *) echo "Usage: $0 {start|stop|restart|status}" >&2; exit 1 ;;
esac

exit 0
